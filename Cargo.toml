[package]
name = "libui"
version = "0.7.10"
edition = "2021"
description = "User interface mock-up and demo for Rend3/Egui game-type cross platform applications"

#   Usable targets:
#   - native (on Linux)
#   - x86_64-pc-windows-gnu
#
#   When compiling on Linux for a Linux target, use
#
#       cargo build --examples
#
#       cargo build --release --examples
#
#   When cross-compiling to Windows, use:
#
#       cargo build --target x86_64-pc-windows-gnu --examples
#
#       cargo build --profile winrelease --target x86_64-pc-windows-gnu --examples
#
#   This will require a 16GB RAM computer and a minutes-long link, due to Rust bug #98302.
#

[package.metadata.bundle]
identifier = "com.animats.ui-mock"
category = "Game"
resources = ["src/images"]
icon = ["src/images/64x64.png", "src/images/32x32.png"]

[profile.release]
debug = true
lto = "thin"

#   Use only when cross-compiling to target "x86_64-pc-windows-gnu"
#   Ref Rust bug #98302. lto = "thin" fails for target x86_64-pc-windows-gnu. "fat" works, but means minutes-longer link times and more than 8GB of RAM to link.
[profile.winrelease]
inherits = "release"
lto = "fat"

[features]
#   Replay file is a development feature and will be off for production
default = ["replay"]
#   Feature "tracy" enables profiing with Tracy
tracy = ["tracy-client", "profiling/profile-with-tracy"]
#   Feature "replay" enables saving and reloading the viewer state.
#   This should not be enabled in production builds for content security.
replay = []

[[example]]
name = "ui-mock"
path = "src/examples/ui-mock/main.rs"

[dependencies]
#   Compatible with Rend3 0.3.0's Cargo.toml file as of 2023-03-09.
#   Must match libscene and libdialog.
rend3 = { version = "^0.3.0" }
rend3-egui = { version = "^0.3.0" }
rend3-framework = { version = "^0.3.0" }
rend3-routine = { version = "^0.3.0" }

# Winit integration with egui (turn off the clipboard feature)
egui-winit = { version = "0.21", default-features = false, features = ["links", "wayland"] }
#   Try to get rid of this. It's only used for one texture enum.	
wgpu = "0.15"
# Importing png's
image = { version = "0.24.3", default-features = false, features = ["png"] }
# Portable implementation of Instant.
instant = { version = "0.1", unix = ["wasm-bindgen"] }
egui = "0.21.0"
glam = { version = "0.22", features = ["bytemuck", "serde"]}
#   Embedding shaders. This forces shaders to be compiled into the executable
#   rather than loaded at run time. That's because rust-embed won't work cross platoform
#   where source and target file systems are different. Version must match that used in rend3 so 
#   that feature merging takes place.
rust-embed = { version = "6", features = ["debug-embed"]}
winit = "0.28"
#   End of Rend3 compatibilty section.

####egui_winit_platform = "0.16.0"
# Opening URL's
webbrowser = "0.8.2"

rfd = "0.11.1"
futures = "0.3.21"
raw-window-handle = "0.4.3"
# Internationalization
once_cell = "1.12.0"
serde = { version = "1.0", features = ["derive"]}
serde_json = "1.0"
sys-locale = "0.2.0"
oxilangtag = "0.1.3"
# Dark mode
dark-light = "0.2.3"
# Preferences
directories = "4.0"
# Performance monitoring
tracy-client = {version = "0.15.2", optional = true }
profiling = { version = "^1.0.8", default-features = false }
# System information
sysinfo = { version = "0.28", default-features = false }
# Concurrency
crossbeam-channel = "0.5"
# Error handling
log = "0.4.17"
simplelog = "0.10.0"
anyhow = "1.0"
# Security
md5 = "0.7.0"
zeroize = {version = "1.5.7", features = ["zeroize_derive"]}
keyring = "1.2.0"
hex = "0.4.2"
git-version = "0.3.5"


[patch.crates-io]
# c2c2d3237
rend3 = { version = "^0.3.0", git = 'https://github.com/BVE-Reborn/rend3.git', rev = "c2c2d3237" }
rend3-egui = { version = "^0.3.0", git = 'https://github.com/BVE-Reborn/rend3.git', rev = "c2c2d3237" }
rend3-framework = { version = "^0.3.0", git = 'https://github.com/BVE-Reborn/rend3.git', rev = "c2c2d3237" }
rend3-routine = { version = "^0.3.0", git = 'https://github.com/BVE-Reborn/rend3.git', rev = "c2c2d3237" }




