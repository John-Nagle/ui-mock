Notes for ui-mock

2022-06-08

Works under Linux.
Works under Wine 7.0.
Worked on Windows 10.

Still working towards a clean screen.
- Going full screen does not work under Wine. Program aborts. Wine bug. Must report.
- Can't tell if screen is maximized under Winit on Linux. Documented missing feature.

Test icon still does not have a transparent backgroupd.

TODO: Make ESC button restore menus from clean screen.
TODO: Dark mode.
TODO: Static string caching for internationalization.

Still don't have a way to build an .msi installer under Linux. Filed Rust feature request.

2022-06-13

Menu plan, initial version:

Avatar
- Preferences
- Exit

Comm
- Empty for now

Build
- Empty for now


World
- Teleport home
- Teleport to (dialog)

Help
- About
- Help page

Developer
- Load replay file
- Save replay file
- Show statistics
- Show logging window
- Set log message level


Buttons
- Chat window
- Look
- Walk/Run/Fly
- Clothing (empty for now)
- Inventory (empty for now)

2022-06-20 

CF on Tracy problems.

06/15/2022
you either need tracy-client 0.13 and tracy 0.7.8 or you can patch profiling to git, which has tracy-client 0.14
oh sorry, got versions confused you need to depend on tracy-client 0.13
setzer22BOT
 — 
06/15/2022
oh, okay. In my case going to 0.13 is not an issue at all. I just looked the most recent version on crates.io and found it to be 0.14 so I chose that one
cwfitzgeraldBOT
 — 
06/15/2022
yeah, 0.12 -> 0.13 changed which version of tracy you needed
or something
imbrisBOT
 — 

2022-06-20

Tracy working.

Main program:

fn main() {
    #[cfg(feature = "tracy")]
    let _client = tracy_client::Client::start();    // enable profiler if "tracy" feature is on
    
Cargo.toml:
    
[features]
#   Feature "tracy" enables profiing with Tracy
tracy = ["tracy-client", "profiling/profile-with-tracy"]

[dependencies]
tracy-client = {version = "0.13", optional = true }
profiling = { version = "1", default-features = false }

Tracy-release (the profiler tool): 0.8.1

Build command:

cargo build --features tracy --release

2020-06-21

Message window is scrolling OK.

TODO before merge.
- Everything needed for playback  
  - Open playback file
  - Set log level.  [DONE]
  - General purpose popup dialogs. [DONE]
  - Make "Help" failure non-fatal. [DONE]
  
2022-06-23

Looking ahead:
   System states:
      START- not doing anything with 3D.
        -> LOGIN, REPLAY, EXIT
      LOGIN -> Login screen is up
        -> CONNECTED,
      CONNECTED - connected to remote 
        -> SHUTDOWN
      REPLAY - replaying from a file
        -> SHUTDOWN
      SHUTDOWN - cleaning up.
        -> START
      EXIT - Final exit

  Implemented "OK" box with msg. Need to rethink how closing works.[DONE]
  
  2022-06-24
  
     enum MainState{
     }
  
     Need a user event type for the main event queue.
     enum GuiEvent {
        OpenReplay(String),
        SaveReplay(String),
        Login(ConnectInfo),
        Quit
    }
    
    Initial button set
    
    Chat (opens chat window if closed)
    Walk/Run/Fly/Sit/TP (unimplemented message)
    Messages (opens message console window if closed)
    Inventory (unimplemented)
    Clothing (unimplemented)
    
2022-06-26

TODO:
   1. Grid selection and login mockup.  [DONE]
   2. State machine to enable and disable menus. [DONE]
   3. Return results from menus via winit events. [DONE]
   4. Do something about file picker going to background.[DONE]
   
2022-06-29

- Combine state changes and events in some way, while keeping them in sync.
- Find out why scrolling of picture buttons is broken.

2022-07-05

Getting close to integration.
- Get logging level UI connected to actual logger.
- Figure out where translation files go and look for them there. 
  - Probably "assets/locale" wherever the executable is.
- How does the picker get things started?
  - Message to main
- Connection to main system.
  - Rend3 renderer.
  - Statistics
  - File feed-in. 
  - Looking ahead, interface to actually running the client part.
    - How does the UI find out info from the rest of the system?
      - Hard problem. Info is owned by other threads.
      - Need something like a weak pointer to SceneObject.
      - Still need to clean up SceneObject interface.
    
2022-07-09

    How to do model-view-controller with egui:
    - The persistent part of a GUI element is a GuiWindow trait object.
    - We need to be able to have GuiWindow objects receive messages from somewhere.
    - Messages go to GuiState, which needs to find the relevant GuiWindow objects
      and send to them.
      - Use existing event channel. Can receive from other threads.
        - Be careful not to monitor anything that updates fast.
      - Request/response, or publish/subscribe?
      - Linear search, or something more elaborate?
        - Linear search with profiling of event processing.
        - Number of events should be small.
        
2022-10-22

   Basic stuff running.
   Adding login dialog.
   Ownership problem: GuiState owns both all the windows and the mutable state they need.
   So, when a mutable window needs mutable access to the GUI  state, it's a double borrow.
   Need to separate ownership of windows and GUI state.
   But how? If both are members of a larger structure, it's still a double borrow.
  
2023-04-17

Adding statistics widget.
- Where are values for statistics stored?
- In what type?
- If that's part of UiInfo...
  - Is it locked, or updated via msg to the render thread?
    - Probably via msg. 
      - Once per second?
  - Draw functions need access to UiInfo, which is part of AppState, not just CommonState.
  - And the main draw function is fn draw(&mut self, state: &mut CommonState) -> bool; // returns true if menu is in use
  - This is a problem, because AppState is a generic. Can't use AppState instead of CommonState without making everything generic. 
    - MenuGroup can be sent as "Any", but all MenuGroup structs are the same. That's not generic.
    - Can't pass UiState to Draw, even if generic, because that would lead to a double borrow. Both UiState and CommonState are part of AppState.
    - Already hit this for log level, which is why that didn't work.
    - This structure isn't good.
  - Possibilities:
    - What we really want is for all draw fns to have access to GuiState, not just CommonState.
      - GuiState is a generic, and contains AppState and CommonState.
      - AppState is already a trait.
    - Option 1: All draw stuff becomes generic.
    - Option 2: AppState gets boxed and handled via Any, downcast when needed.
   
   
2023-04-29

Ownership and generic problems, as above.
MenuGroup and GuiWindow need to pass GuiState around, instead of CommonState.

/// All GUI windows persistent state.  Includes the generic part.
pub struct GuiState<T: AppState> {
    pub common_state: CommonState, // same regardless of generic
    pub app_state: T,              // application-specific state
}

OK, suppose we make app_state a dyn any, and downcast when needed. 
That should work.
Do MenuGroup and GuiWindow actually have to be dyn any? Check. Doesn't look like it.
   
/// A group of menus. Libui user sets what menus are to be shown.
pub trait MenuGroup {
    fn draw(&mut self, state: &mut CommonState) -> bool; // returns true if menu is in use
    fn get_name(&self) -> &'static str; // name for debug and logging purposes only
    fn as_any(&self) -> &dyn Any; // for downcasting
    fn as_any_mut(&mut self) -> &mut dyn Any; // for downcasting
}

/// A GUI window
pub trait GuiWindow {
    fn draw(&mut self, ctx: &egui::Context, state: &mut CommonState); // called every frame
    fn retain(&self) -> bool {
        true
    } // override and set to false when done
    fn get_id(&self) -> egui::Id; // get ID of window
    fn as_any(&self) -> &dyn Any; // for downcasting
    fn as_any_mut(&mut self) -> &mut dyn Any; // for downcasting
}

pub type GuiWindowLink = Rc<RefCell<dyn GuiWindow>>;
pub type MenuGroupLink = Rc<RefCell<dyn MenuGroup>>;

2023-04-30

Solving the wrong problem.
Correct solution - model/view/controller.
Most dialogs do not need dynamic updates from messages.
Those that do need to implement a function to process them.
So GuiWindow and MenuGroup need to implement incoming_message, which takes a dyn any.
Any window or group which gets dynamic updates needs to implement this. 
Incoming messages are passed to incoming_message of the currrent MenuGroup and to any open GuiWindow.
Don't send too many messages. Event-driven, not periodic.

Coded that framework. Can't pass CommonState to windows, though, because CommonState is at the
same ownership level as the list of windows. May need to re-organize CommonState.
    
2023-05-02

The event queue system is a mess. Some of those channels aren't doing anything.
We're putting update events from the render thread on a qeueue read by nobody, and
addressed to the render thread anyway. This is silly.
    
